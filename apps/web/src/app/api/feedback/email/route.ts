import { NextRequest, NextResponse } from 'next/server'

// Dynamic import for Resend to avoid build-time issues
let resendInstance: any = null

async function getResend() {
  if (resendInstance !== null) return resendInstance
  
  if (!process.env.RESEND_API_KEY || 
      !process.env.RESEND_API_KEY.startsWith('re_') || 
      process.env.RESEND_API_KEY === 're_your-resend-api-key') {
    resendInstance = false
    return resendInstance
  }
  
  try {
    const { Resend } = await import('resend')
    resendInstance = new Resend(process.env.RESEND_API_KEY)
    return resendInstance
  } catch (error) {
    console.error('Failed to load Resend:', error)
    resendInstance = false
    return resendInstance
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { 
      type, 
      mealPlanId, 
      rating, 
      feedback, 
      mealType, 
      issues, 
      issueType, 
      description, 
      suggestion, 
      severity,
      userEmail,
      userName 
    } = body

    console.log('üìß Received feedback:', { type, mealPlanId, rating, userEmail })

    const resend = await getResend()
    
    if (!resend) {
      console.warn('‚ö†Ô∏è Resend API key not configured. Email sending disabled.')
      return NextResponse.json({ success: false, error: 'Email service not configured' })
    }

    // Determine email subject and content based on feedback type
    let subject = ''
    let emailContent = ''

    if (type === 'rating') {
      subject = `üçΩÔ∏è Meal Plan Rating: ${rating}/5 stars - ${mealType || 'Meal'}`
      
      const starRating = '‚≠ê'.repeat(rating) + '‚òÜ'.repeat(5 - rating)
      
      emailContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background: linear-gradient(135deg, #10B981, #059669); color: white; padding: 20px; border-radius: 10px 10px 0 0; text-align: center;">
            <h1 style="margin: 0; font-size: 24px;">üçΩÔ∏è Meal Plan Feedback</h1>
            <p style="margin: 5px 0 0; opacity: 0.9;">WellPlate AI Coach</p>
          </div>
          
          <div style="background: white; padding: 30px; border: 1px solid #e5e7eb; border-top: none;">
            <div style="background: #f9fafb; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
              <h2 style="color: #374151; margin: 0 0 10px;">Rating Details</h2>
              <p style="margin: 0; font-size: 18px;"><strong>Rating:</strong> ${starRating} (${rating}/5)</p>
              <p style="margin: 5px 0 0;"><strong>Meal Type:</strong> ${mealType || 'Not specified'}</p>
              <p style="margin: 5px 0 0;"><strong>Meal Plan ID:</strong> ${mealPlanId}</p>
            </div>
            
            <div style="margin-bottom: 20px;">
              <h3 style="color: #374151; margin: 0 0 10px;">User Feedback</h3>
              <div style="background: #f3f4f6; padding: 15px; border-radius: 6px; border-left: 4px solid #10B981;">
                <p style="margin: 0; line-height: 1.6;">${feedback}</p>
              </div>
            </div>
            
            ${issues && issues.length > 0 ? `
            <div style="margin-bottom: 20px;">
              <h3 style="color: #374151; margin: 0 0 10px;">Reported Issues</h3>
              <ul style="margin: 0; padding-left: 20px;">
                ${issues.map((issue: string) => `<li style="margin: 5px 0;">${issue}</li>`).join('')}
              </ul>
            </div>
            ` : ''}
            
            <div style="background: #f0f9ff; padding: 15px; border-radius: 6px; border-left: 4px solid #0ea5e9;">
              <p style="margin: 0; color: #0c4a6e;"><strong>User:</strong> ${userName || 'Anonymous'} (${userEmail})</p>
              <p style="margin: 5px 0 0; color: #0c4a6e;"><strong>Time:</strong> ${new Date().toLocaleString()}</p>
            </div>
          </div>
          
          <div style="background: #f9fafb; padding: 20px; border-radius: 0 0 10px 10px; text-align: center; color: #6b7280;">
            <p style="margin: 0; font-size: 14px;">This feedback was automatically generated by WellPlate AI Coach</p>
          </div>
        </div>
      `
    } else if (type === 'issue') {
      subject = `‚ö†Ô∏è Meal Issue Report: ${issueType} - ${severity || 'Medium'} Priority`
      
      const severityColor = severity === 'high' ? '#dc2626' : severity === 'medium' ? '#d97706' : '#059669'
      const severityEmoji = severity === 'high' ? 'üî¥' : severity === 'medium' ? 'üü°' : 'üü¢'
      
      emailContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background: linear-gradient(135deg, #dc2626, #b91c1c); color: white; padding: 20px; border-radius: 10px 10px 0 0; text-align: center;">
            <h1 style="margin: 0; font-size: 24px;">‚ö†Ô∏è Meal Issue Report</h1>
            <p style="margin: 5px 0 0; opacity: 0.9;">WellPlate AI Coach</p>
          </div>
          
          <div style="background: white; padding: 30px; border: 1px solid #e5e7eb; border-top: none;">
            <div style="background: #fef2f2; padding: 20px; border-radius: 8px; margin-bottom: 20px; border-left: 4px solid ${severityColor};">
              <h2 style="color: #374151; margin: 0 0 10px;">Issue Details</h2>
              <p style="margin: 0; font-size: 18px;"><strong>Type:</strong> ${issueType?.replace(/_/g, ' ').toUpperCase()}</p>
              <p style="margin: 5px 0 0;"><strong>Severity:</strong> ${severityEmoji} ${severity?.toUpperCase() || 'MEDIUM'}</p>
              <p style="margin: 5px 0 0;"><strong>Meal Plan ID:</strong> ${mealPlanId}</p>
            </div>
            
            <div style="margin-bottom: 20px;">
              <h3 style="color: #374151; margin: 0 0 10px;">Issue Description</h3>
              <div style="background: #f3f4f6; padding: 15px; border-radius: 6px; border-left: 4px solid #dc2626;">
                <p style="margin: 0; line-height: 1.6;">${description}</p>
              </div>
            </div>
            
            ${suggestion ? `
            <div style="margin-bottom: 20px;">
              <h3 style="color: #374151; margin: 0 0 10px;">User Suggestion</h3>
              <div style="background: #f0f9ff; padding: 15px; border-radius: 6px; border-left: 4px solid #0ea5e9;">
                <p style="margin: 0; line-height: 1.6;">${suggestion}</p>
              </div>
            </div>
            ` : ''}
            
            <div style="background: #f0f9ff; padding: 15px; border-radius: 6px; border-left: 4px solid #0ea5e9;">
              <p style="margin: 0; color: #0c4a6e;"><strong>User:</strong> ${userName || 'Anonymous'} (${userEmail})</p>
              <p style="margin: 5px 0 0; color: #0c4a6e;"><strong>Time:</strong> ${new Date().toLocaleString()}</p>
            </div>
          </div>
          
          <div style="background: #f9fafb; padding: 20px; border-radius: 0 0 10px 10px; text-align: center; color: #6b7280;">
            <p style="margin: 0; font-size: 14px;">This issue report was automatically generated by WellPlate AI Coach</p>
          </div>
        </div>
      `
    }

    // Send email to your address
    const { data, error } = await resend.emails.send({
      from: 'WellPlate Feedback <getwellplate@gmail.com>',
      to: 'getwellplate@gmail.com', // Your email address
      subject: subject,
      html: emailContent,
    })

    if (error) {
      console.error('‚ùå Resend error:', error)
      return NextResponse.json({ success: false, error: 'Failed to send email' })
    }

    console.log('‚úÖ Feedback email sent successfully:', data?.id)
    
    return NextResponse.json({ 
      success: true, 
      messageId: data?.id,
      message: 'Feedback email sent successfully' 
    })

  } catch (error) {
    console.error('‚ùå Email sending error:', error)
    return NextResponse.json({ 
      success: false, 
      error: 'Internal server error' 
    }, { status: 500 })
  }
}
