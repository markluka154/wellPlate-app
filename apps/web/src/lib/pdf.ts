import PDFDocument from 'pdfkit'
import { type MealPlanResponse } from '@wellplate/shared'

const BRAND_PRIMARY = '#0F172A'
const BRAND_ACCENT = '#10B981'
const TEXT_MAIN = '#1F2937'
const TEXT_MUTED = '#6B7280'
const CARD_BG = '#F9FAFB'
const BORDER = '#E5E7EB'

export async function generateMealPlanPDF(
  mealPlan: MealPlanResponse,
  userEmail: string
): Promise<Buffer> {
  const doc = new PDFDocument({ size: 'A4', margin: 0 })
  const buffers: Buffer[] = []
  doc.on('data', buffers.push.bind(buffers))

  return new Promise((resolve, reject) => {
    doc.on('end', () => resolve(Buffer.concat(buffers)))
    doc.on('error', reject)

    const pageWidth = doc.page.width
    const pageHeight = doc.page.height
    const marginX = 48
    const marginTop = 96
    const contentWidth = pageWidth - marginX * 2

    const drawFooter = () => {
      doc.font('Helvetica')
        .fontSize(9)
        .fillColor('#94A3B8')
        .text(
          'Generated by WellPlate — Premium nutrition for your lifestyle',
          marginX,
          pageHeight - 42,
          { width: contentWidth, align: 'center' }
        )
    }

    const renderCoverPage = () => {
      doc.rect(0, 0, pageWidth, pageHeight).fill(BRAND_PRIMARY)

      doc.font('Helvetica-Bold')
        .fontSize(36)
        .fillColor('#ECFDF5')
        .text('WellPlate', marginX, 72)

      doc.font('Helvetica')
        .fontSize(13)
        .fillColor('#D1FAE5')
        .text('Your personalized nutrition dossier', marginX, 116)
        .moveDown(0.5)
        .fillColor('#A7F3D0')
        .text(`Prepared for ${userEmail}`)
        .text(`Generated on ${new Date().toLocaleDateString()}`)

      const summaryCards = [
        {
          label: 'Daily Calorie Target',
          value: `${Math.round(mealPlan.totals.kcal / mealPlan.plan.length)} kcal`
        },
        {
          label: 'Total Weekly Calories',
          value: `${mealPlan.totals.kcal} kcal`
        },
        {
          label: 'Protein / Carbs / Fat',
          value: `${mealPlan.totals.protein_g}g  |  ${mealPlan.totals.carbs_g}g  |  ${mealPlan.totals.fat_g}g`
        }
      ]

      const cardWidth = (contentWidth - 32) / 3
      const cardY = 188
      summaryCards.forEach((card, index) => {
        const x = marginX + index * (cardWidth + 16)
        doc.save().roundedRect(x, cardY, cardWidth, 118, 20).fill('#111827').restore()

        doc.font('Helvetica-Bold')
          .fontSize(12)
          .fillColor('#A7F3D0')
          .text(card.label.toUpperCase(), x + 20, cardY + 20, { width: cardWidth - 40 })

        doc.font('Helvetica-Bold')
          .fontSize(20)
          .fillColor('#ECFDF5')
          .text(card.value, x + 20, cardY + 52, { width: cardWidth - 40 })
      })

      doc.save().roundedRect(marginX, cardY + 150, contentWidth, 150, 22).fill('#FFFFFF').restore()

      doc.font('Helvetica-Bold')
        .fontSize(18)
        .fillColor(BRAND_PRIMARY)
        .text('Highlights', marginX + 28, cardY + 180)

      const highlights = [
        'Chef-crafted meals aligned with your nutrition targets and dietary style.',
        'Detailed macros, smart substitutions, and storage tips for each recipe.',
        'Curated grocery guide with premium staples and effortless planning prompts.'
      ]

      doc.font('Helvetica')
        .fontSize(11)
        .fillColor(TEXT_MUTED)
      highlights.forEach((line, idx) => {
        const y = cardY + 210 + idx * 26
        doc.circle(marginX + 28, y + 4, 2).fill(BRAND_ACCENT)
        doc.text(line, marginX + 40, y - 4, { width: contentWidth - 60 })
      })

      drawFooter()
    }

    const drawDayHeader = (title: string, subtitle?: string) => {
      doc.font('Helvetica-Bold')
        .fontSize(20)
        .fillColor(BRAND_PRIMARY)
        .text(title, marginX, 62, { width: contentWidth })

      if (subtitle) {
        doc.font('Helvetica')
          .fontSize(11)
          .fillColor(TEXT_MUTED)
          .text(subtitle, marginX, 88, { width: contentWidth })
      }

      doc.moveTo(marginX, 108).lineTo(pageWidth - marginX, 108).stroke(BORDER)
    }

    const renderDayPage = (dayPlan: MealPlanResponse['plan'][number]) => {
      doc.addPage()

      const daySummary = dayPlan.daily_nutrition_summary || {
        kcal: dayPlan.meals.reduce((acc, meal) => acc + (meal.kcal || 0), 0),
        protein_g: dayPlan.meals.reduce((acc, meal) => acc + (meal.protein_g || 0), 0),
        carbs_g: dayPlan.meals.reduce((acc, meal) => acc + (meal.carbs_g || 0), 0),
        fat_g: dayPlan.meals.reduce((acc, meal) => acc + (meal.fat_g || 0), 0)
      }

      drawDayHeader(
        `Day ${dayPlan.day}`,
        `${daySummary.kcal} kcal • ${daySummary.protein_g}g protein • ${daySummary.carbs_g}g carbs • ${daySummary.fat_g}g fat`
      )

      let yPosition = marginTop

      const macroBoxWidth = (contentWidth - 48) / 4
      const macroData = [
        { label: 'Calories', value: `${daySummary.kcal} kcal` },
        { label: 'Protein', value: `${daySummary.protein_g} g` },
        { label: 'Carbs', value: `${daySummary.carbs_g} g` },
        { label: 'Fat', value: `${daySummary.fat_g} g` }
      ]

      macroData.forEach((macro, idx) => {
        const x = marginX + idx * (macroBoxWidth + 16)
        doc.save().roundedRect(x, yPosition, macroBoxWidth, 68, 14).fill('#EEF2FF').restore()

        doc.font('Helvetica-Bold')
          .fontSize(10)
          .fillColor('#4338CA')
          .text(macro.label.toUpperCase(), x + 16, yPosition + 16)

        doc.font('Helvetica-Bold')
          .fontSize(14)
          .fillColor(BRAND_PRIMARY)
          .text(macro.value, x + 16, yPosition + 34)
      })

      yPosition += 88

      const renderMealCard = (meal: MealPlanResponse['plan'][number]['meals'][number]) => {
        const padding = 20
        const columnGap = 28
        const columnWidth = (contentWidth - padding * 2 - columnGap) / 2

        const ingredientsText = meal.ingredients
          .map((ingredient) => `${ingredient.qty} - ${ingredient.item}`)
          .join('\n')

        const instructionsText = meal.steps
          .map((step, index) => `${index + 1}. ${step}`)
          .join('\n\n')

        const ingredientsHeight = doc.heightOfString(ingredientsText, {
          width: columnWidth,
          lineGap: 3,
          paragraphGap: 6
        })

        const instructionsHeight = doc.heightOfString(instructionsText, {
          width: columnWidth,
          lineGap: 4,
          paragraphGap: 8
        })

        const textHeight = Math.max(ingredientsHeight, instructionsHeight)
        const cardHeight = padding * 2 + 64 + textHeight

        if (yPosition + cardHeight + 20 > pageHeight - 80) {
          doc.addPage()
          drawDayHeader(`Day ${dayPlan.day} (continued)`)
          yPosition = marginTop
        }

        doc.save().roundedRect(marginX, yPosition, contentWidth, cardHeight, 18).fill(CARD_BG).restore()

        let cursorY = yPosition + padding

        doc.font('Helvetica-Bold')
          .fontSize(14)
          .fillColor(TEXT_MAIN)
          .text(meal.name, marginX + padding, cursorY, { width: contentWidth - padding * 2 })

        cursorY += 24

        doc.font('Helvetica')
          .fontSize(10)
          .fillColor(BRAND_ACCENT)
          .text(`${meal.kcal} kcal`, marginX + padding, cursorY)
          .fillColor(TEXT_MUTED)
          .text(`Protein ${meal.protein_g}g`, marginX + padding + 110, cursorY)
          .text(`Carbs ${meal.carbs_g}g`, marginX + padding + 220, cursorY)
          .text(`Fat ${meal.fat_g}g`, marginX + padding + 320, cursorY)

        cursorY += 30

        doc.font('Helvetica-Bold')
          .fontSize(11)
          .fillColor(TEXT_MAIN)
          .text('Ingredients', marginX + padding, cursorY)
          .text('Instructions', marginX + padding + columnWidth + columnGap, cursorY)

        cursorY += 16

        doc.font('Helvetica')
          .fontSize(10)
          .fillColor(TEXT_MUTED)
          .text(ingredientsText, marginX + padding, cursorY, {
            width: columnWidth,
            lineGap: 3,
            paragraphGap: 6
          })

        doc.text(instructionsText, marginX + padding + columnWidth + columnGap, cursorY, {
          width: columnWidth,
          lineGap: 4,
          paragraphGap: 8
        })

        yPosition += cardHeight + 18
      }
      dayPlan.meals.forEach(renderMealCard)

      drawFooter()
    }

    const renderGroceriesPage = () => {
      doc.addPage()
      drawDayHeader('Grocery List & Weekly Overview')

      doc.font('Helvetica-Bold')
        .fontSize(16)
        .fillColor(TEXT_MAIN)
        .text('Summary', marginX, marginTop)

      const summaryRows = [
        { label: 'Weekly Calories', value: `${mealPlan.totals.kcal} kcal` },
        { label: 'Total Protein', value: `${mealPlan.totals.protein_g} g` },
        { label: 'Total Carbs', value: `${mealPlan.totals.carbs_g} g` },
        { label: 'Total Fat', value: `${mealPlan.totals.fat_g} g` }
      ]

      let summaryY = marginTop + 32
      summaryRows.forEach((row) => {
        doc.font('Helvetica-Bold')
          .fontSize(10)
          .fillColor(BRAND_PRIMARY)
          .text(row.label.toUpperCase(), marginX, summaryY)

        doc.font('Helvetica')
          .fontSize(11)
          .fillColor(TEXT_MAIN)
          .text(row.value, marginX + 200, summaryY)

        summaryY += 24
      })

      summaryY += 18

      doc.font('Helvetica-Bold')
        .fontSize(14)
        .fillColor(TEXT_MAIN)
        .text('Grocery List', marginX, summaryY)

      summaryY += 26

      const columnWidth = (contentWidth - 24) / 2
      let columnX = marginX
      let columnY = summaryY

      mealPlan.groceries.forEach((category) => {
        const itemsText = category.items.join('\n')
        const blockHeight = doc.heightOfString(itemsText, { width: columnWidth, lineGap: 3 }) + 32

        if (columnY + blockHeight > pageHeight - 80) {
          columnY = summaryY
          columnX = marginX + columnWidth + 24
        }

        doc.font('Helvetica-Bold')
          .fontSize(12)
          .fillColor(BRAND_PRIMARY)
          .text(category.category, columnX, columnY)

        doc.font('Helvetica')
          .fontSize(10)
          .fillColor(TEXT_MUTED)
          .text(itemsText, columnX, columnY + 18, { width: columnWidth, lineGap: 3 })

        columnY += blockHeight
      })

      drawFooter()
    }

    renderCoverPage()
    mealPlan.plan.forEach(renderDayPage)
    renderGroceriesPage()

    doc.end()
  })
}
