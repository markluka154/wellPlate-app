import PDFDocument from 'pdfkit'
import { type MealPlanResponse } from '@wellplate/shared'

export async function generateMealPlanPDF(
  mealPlan: MealPlanResponse,
  userEmail: string
): Promise<Buffer> {
  const doc = new PDFDocument({
    size: 'A4',
    margin: 50,
  })

  const buffers: Buffer[] = []
  doc.on('data', buffers.push.bind(buffers))

  return new Promise((resolve, reject) => {
    doc.on('end', () => {
      const pdfData = Buffer.concat(buffers)
      resolve(pdfData)
    })

    doc.on('error', reject)

    // Header
    doc.fontSize(24)
      .fillColor('#10B981')
      .text('WellPlate', 50, 50)
    
    doc.fontSize(12)
      .fillColor('#6B7280')
      .text(`Generated for ${userEmail}`, 50, 80)
      .text(`Generated on ${new Date().toLocaleDateString()}`, 50, 95)

    // Add a line separator
    doc.moveTo(50, 110)
      .lineTo(545, 110)
      .stroke('#E5E7EB')

    let yPosition = 130

    // Generate content for each day
    for (const dayPlan of mealPlan.plan) {
      // Day header
      doc.fontSize(16)
        .fillColor('#1F2937')
        .text(`Day ${dayPlan.day}`, 50, yPosition)
      
      yPosition += 30

      // Meals for this day
      for (const meal of dayPlan.meals) {
        // Meal name
        doc.fontSize(14)
          .fillColor('#374151')
          .text(meal.name, 70, yPosition)
        
        yPosition += 25

        // Macros
        doc.fontSize(10)
          .fillColor('#6B7280')
          .text(`${meal.kcal} kcal`, 70, yPosition)
          .text(`Protein: ${meal.protein_g}g`, 150, yPosition)
          .text(`Carbs: ${meal.carbs_g}g`, 250, yPosition)
          .text(`Fat: ${meal.fat_g}g`, 350, yPosition)
        
        yPosition += 20

        // Ingredients
        doc.fontSize(11)
          .fillColor('#374151')
          .text('Ingredients:', 70, yPosition)
        
        yPosition += 15

        for (const ingredient of meal.ingredients) {
          doc.fontSize(10)
            .fillColor('#6B7280')
            .text(`• ${ingredient.item} (${ingredient.qty})`, 90, yPosition)
          yPosition += 15
        }

        // Steps
        doc.fontSize(11)
          .fillColor('#374151')
          .text('Instructions:', 70, yPosition)
        
        yPosition += 15

        for (let i = 0; i < meal.steps.length; i++) {
          doc.fontSize(10)
            .fillColor('#6B7280')
            .text(`${i + 1}. ${meal.steps[i]}`, 90, yPosition)
          yPosition += 15
        }

        yPosition += 20

        // Check if we need a new page
        if (yPosition > 700) {
          doc.addPage()
          yPosition = 50
        }
      }

      // Add spacing between days
      yPosition += 20
    }

    // Add new page for totals and grocery list
    doc.addPage()

    // Weekly totals
    doc.fontSize(18)
      .fillColor('#1F2937')
      .text('Weekly Totals', 50, 50)

    doc.fontSize(12)
      .fillColor('#374151')
      .text(`Total Calories: ${mealPlan.totals.kcal}`, 70, 90)
      .text(`Total Protein: ${mealPlan.totals.protein_g}g`, 70, 110)
      .text(`Total Carbs: ${mealPlan.totals.carbs_g}g`, 70, 130)
      .text(`Total Fat: ${mealPlan.totals.fat_g}g`, 70, 150)

    // Grocery list
    doc.fontSize(18)
      .fillColor('#1F2937')
      .text('Grocery List', 50, 200)

    let groceryY = 240

    for (const category of mealPlan.groceries) {
      doc.fontSize(14)
        .fillColor('#374151')
        .text(category.category, 70, groceryY)
      
      groceryY += 25

      for (const item of category.items) {
        doc.fontSize(11)
          .fillColor('#6B7280')
          .text(`• ${item}`, 90, groceryY)
        groceryY += 15
      }

      groceryY += 10
    }

    // Footer
    doc.fontSize(8)
      .fillColor('#9CA3AF')
      .text('Generated by WellPlate - Your AI Meal Planning Assistant', 50, 750, {
        align: 'center',
      })

    doc.end()
  })
}
